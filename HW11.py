import numpy as np
import matplotlib.pyplot as plt

data = np.array([0.101568640393226,	1.16718578141668,	1.08276814738461,	0.374313715077529,	-1.46462409746178,	-1.83344089035939,	0.0210757376598324,	-0.115051182389622,	-0.198701644975713,	2.01946814331766,	2.44485098105064,	-0.976790352104777,	-0.445410620769983,	-0.603507354405099,	-1.1756331186129,	0.676195327455664,	0.815998348602559,	-0.698867719049,	1.19416290887466,	1.75386808199699,	-1.57934175022769,	-1.60842008210065,	1.80279073511005,	-1.2205329869295,	-2.42813813569361,	1.80309193102955,	0.309738539455795,	-1.89217462541281,	0.944216673679911,	0.309025461034847,	-1.13014990435065,	-0.949021055407477,	-0.140572216442862,	-0.16770877768155,	-0.907887748626587,	-1.53011823306752,	-0.866139108646493,	-0.600591383477088,	-0.00772207627247434,	-0.894577613979865,	-0.617235096992679,	0.63155350480117,	-2.30605751992204,	-2.03041061677728,	1.41109000585193,	0.909595935008521,	-0.524068851338916,	-0.174712021925026,	1.04378065237168,	1.95836310614442,	-0.392730899152901,	-1.7385951731697,	-0.704004755528232,	-0.0433676226292428,	0.963079336132203,	-0.246553848361318,	-0.78668680527873,	-0.685536887148284,	1.91355554800452,	1.86927615235882,	1.13498269680682,	2.38341106781199,	0.513355679872827,	-2.38297843103953,	-0.450409400275331,	0.0391137653703199,	-1.15028319809686,	0.443060747778059,	-1.36111976269556,	-1.30522389496768,	0.370306175287276,	0.593906599445896,	-0.753725118942598,	0.045912371448575,	1.74914458069422,	0.421154302526831,	-0.698588527953199,	0.371620016692675,	-1.69636083286192,	-3.18578214463471,	1.45546569452421,	3.6697785863219,	-0.858799519463582,	-0.256201802883327,	1.70337802593675,	-1.35140822022109,	-2.35252688057519,	0.991095299303552,	-0.0361904177642712,	-0.526777611896659,	1.33621451856753,	-0.50108909330631,	-0.957224907290354,	-1.87303804485977,	-2.56775711927238,	-2.1889649151963,	-0.980676780875947,	1.25334606133465,	1.8544254168647,	0.806640086])

N = len(data)
mu_x = np.mean(data)
M = 10

freq = np.linspace(0, np.pi, 200)

R = np.empty(N-1) # calculating autocovariance function
for k in range(N-1):
    R[k] = (1/N)*sum((data[:N-k] - mu_x)*(data[k:] - mu_x))

# Truncated Periodogram
f = (1 / (2 * np.pi)) * np.array([R[0] + 2 * np.sum([R[k] * np.cos(w * k) for k in range(1, M + 1)]) for w in freq])
plt.plot(freq, f)
plt.xlabel('Frequency')
plt.ylabel('Spectrum')
plt.show()

# Triangular Window
print()
f = (1 / (2 * np.pi)) * np.array([R[0] + 2 * np.sum([(1 - k / M) * R[k] * np.cos(w * k) for k in range(1, M + 1)]) for w in freq])
plt.plot(freq, f)
plt.xlabel('Frequency')
plt.ylabel('Spectrum')
plt.show()

# Parzen Window
def lambda_k (x):
    if x <= 0.5:
        return 1 - 6*x**2 + 6*x**3
    elif x <= 1:
        return 2*(1 - x)**3
    else:
        return 0
f = (1 / (2 * np.pi)) * np.array([R[0] + 2 * np.sum([lambda_k(k / M) * R[k] * np.cos(w * k) for k in range(1, M + 1)]) for w in freq])
plt.plot(freq, f)
plt.xlabel('Frequency')
plt.ylabel('Spectrum')
plt.show()